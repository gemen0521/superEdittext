apply plugin: 'com.android.library'

android {
    compileSdkVersion COMPILE_SDK_VERSION


    defaultConfig {
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "com.android.support:appcompat-v7:$SUPPORT_LIB_VERSION"
    implementation "com.android.support:support-v4:$SUPPORT_LIB_VERSION"
    implementation "com.android.support:design:$SUPPORT_LIB_VERSION"
    testImplementation 'junit:junit:4.12'
//    implementation project(':glidelibrary')
}

//task to delete the old jar
task deleteOldJar(type: Delete) {
    delete 'release/ChooseEdit.jar'
}

//task to export contents as jar  
task exportJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('release/')
    include('classes.jar')
    ///Rename the jar
    rename('classes.jar', 'ChooseEdit.jar')
}

exportJar.dependsOn(deleteOldJar, build)
